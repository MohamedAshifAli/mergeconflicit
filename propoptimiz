import numpy as np
from copy import deepcopy
from mealpy.optimizer import Optimizer




class BaseProp(Optimizer):
    def __init__(self, problem, epoch=10000, pop_size=100, **kwargs):
        """
        Args:
            problem (dict): The problem dictionary
            epoch (int): maximum number of iterations, default = 10000
            pop_size (int): number of population size, default = 100
        """
        super().__init__(problem, kwargs)
        self.epoch = self.validator.check_int("epoch", epoch, [1, 100000])
        self.pop_size = self.validator.check_int("pop_size", pop_size, [10, 10000])
        self.nfe_per_epoch = self.pop_size
        self.sort_flag = False
        self.B = np.random.uniform(0.5, 2)
        self.tmax=self.epoch

    def evolve(self, epoch):
        """
        The main operations (equations) of algorithm. Inherit from Optimizer class

        Args:
            epoch (int): The current iteration
        """
        # linearly decreased from 2 to 0
        a = 2 - 2 * epoch / (self.epoch - 1)
        _, list_best, _ = self.get_special_solutions(self.pop, best=3)
        t=0
        r1=np.random.rand()
        pop_new = []
        while t<self.tmax:
            for idx in range(0, self.pop_size):
                if self.B>=1:
                    ## Availability Phase
                    ### Case 1: T1 Phase
                    if 0<=t<1/3*self.tmax:
                        Xt=self.problem.lb + r1*(self.problem.ub-self.problem.lb)
                    elif 1/3*(self.tmax)<=t<2/3*(self.tmax):
                        Xt=self.problem.lb + r1*(self.problem.ub-self.problem.lb)
                    elif 2/3*(self.tmax)<=t<=self.tmax:
                        Xt=self.problem.lb + r1*(self.problem.ub-self.problem.lb)
                else:
                    ### Unavailability Phase
                    A1, A2, A3 = a * (2 * np.random.uniform() - 1), a * (2 * np.random.uniform() - 1), a * (2 * np.random.uniform() - 1)
                    C1, C2, C3 = 2 * np.random.uniform(), 2 * np.random.uniform(), 2 * np.random.uniform()
                    X1 = list_best[0][self.ID_POS] - A1 * np.abs(C1 * list_best[0][self.ID_POS] - self.pop[idx][self.ID_POS])
                    X2 = list_best[1][self.ID_POS] - A2 * np.abs(C2 * list_best[1][self.ID_POS] - self.pop[idx][self.ID_POS])
                    X3 = list_best[2][self.ID_POS] - A3 * np.abs(C3 * list_best[2][self.ID_POS] - self.pop[idx][self.ID_POS])
                    # Xt = (X1 + X2 + X3) / 3.0
                    # Xt = self.amend_position(Xt, self.problem.lb, self.problem.ub)
                    # Xt.append([Xt, None])
                    Xt = (X1 + X2 + X3) / 3.0
                pos_new = self.amend_position(Xt, self.problem.lb, self.problem.ub)
                pop_new.append([pos_new, None])

                if self.mode not in self.AVAILABLE_MODES:
                    target = self.get_target_wrapper(pos_new)
                    self.pop[idx] = self.get_better_solution([pos_new, target], self.pop[idx])
            if self.mode in self.AVAILABLE_MODES:
                pop_new = self.update_target_wrapper_population(pop_new)
                self.pop = self.greedy_selection_population(self.pop, pop_new)
            t+=1

